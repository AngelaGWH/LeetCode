class Solution {
public:
    int search(vector<int>& nums, int target) {
        unsigned int i = 0;
        for(i = 0; i < nums.size(); i++)
        {
            if(nums[i] == target)
                break;
        }
        if(i >= nums.size())
            return -1;
        else
            return i;
    }
};

class Solution {
public:
    int search(vector<int>& nums, int target) {
        return bsearch(nums, 0, nums.size() - 1, target);
    }
private:
    int bsearch(vector<int>& nums, int start, int end, int target)
    {
        if(start > end)
            return -1;
        int mid = (end + start)/2;
        if(target == nums[mid])
            return mid;
        
        if(start <= mid - 1 and nums[start] <= nums[mid - 1])
        {
            if( target >=nums[start] and nums[mid - 1] >= target)
                return bsearch(nums, start, mid-1, target);
            else
                return bsearch(nums, mid+1, end, target);
        }
        else
        {
            if(mid + 1<=end and nums[mid + 1] <= nums[end])
            {
                if(target >= nums[mid+1] and target <= nums[end])
                    return bsearch(nums, mid+1, end, target);
                else
                    return bsearch(nums, start, mid-1, target);
            }
        }
        return -1;
    }
};








