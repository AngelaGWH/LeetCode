class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        std::stack<int> que;
        if(k == nums.size())
        {
            return;
        }
        if( k > nums.size())
            k = k % nums.size();
        int index = nums.size() - 1;
        while(index >=0 and index > nums.size() - 1 - k)
        {
            que.push(nums[index]);
            index--;
        }
        std::vector<int> res;
        while(not que.empty())
        {
            res.push_back(que.top());
            que.pop();
        }
        index = 0;
        while(index <= nums.size() - 1 - k)
        {
            res.push_back(nums[index]);
            index++;
        }
        
        nums.clear();
        std::copy(res.begin(), res.end(), std::back_inserter(nums));
    }
};


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if ( k == nums.size() )
            return;
        if(k > nums.size())
            k = k % nums.size();
        int count = 0;
        while(count < k)
        {
            int endvalue = nums[nums.size() - 1];
            nums.erase(nums.end() - 1);
            nums.insert(nums.begin(), endvalue);
            count++;
        }
    }
};

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if(k == nums.size())
            return;
        if(k > nums.size())
            k = k % nums.size();
        vector<int> anotherNums;
        std::copy(nums.begin() + nums.size() - k, nums.end(), std::back_inserter(anotherNums));

        vector<int> res;
        std::copy(anotherNums.begin(), anotherNums.end(), std::back_inserter(res));
        std::copy(nums.begin(), nums.begin() + nums.size() - k, std::back_inserter(res));
        nums = res;
    }
};