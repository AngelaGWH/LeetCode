class Solution {
private:
    bool static cmp(std::pair<int, int>& a, std::pair<int, int>& b)
    {
        if(a.first < b.first)
            return true;
        if(a.first == b.first)
            return a.second <= b.second;
        return false;
    }
public:
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        vector<std::pair<int, int>> helper;
        for(int i = 0; i < mat.size(); i++)
        {
            int sum = 0;
            for(auto j = 0 ; j < mat[i].size(); j++)
                sum = sum + mat[i][j];
            helper.push_back(std::make_pair(sum, i));
        }
        std::sort(helper.begin(), helper.end(), cmp);
        vector<int> res;
        for(int i = 0; i < k; i++)
        {
            if(i < helper.size())
                res.push_back(helper[i].second);
        }
        return res;
    }
};